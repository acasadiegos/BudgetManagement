@{
    ViewData["Title"] = "Calendar Report";
}

<partial name="_Submenu" Model="TransactionSubmenu.Calendar"/>

<div id="calendar"></div>

<div class="modal fade" id="transactionsModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Transactions of the day</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th id="modalTableDate" colspan="2"></th>
                            <th id="modalTableIncomes" class="activo"></th>
                            <th id="modalTableEgress" class="pasivo"></th>
                        </tr>
                    </thead>
                    <tbody id="modalTableBody">

                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/fullcalendar/main.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function(){
            const calendarEl = document.getElementById('calendar');
            const calendar = new FullCalendar.Calendar(calendarEl, {
                dayMaxEventRows: 3,
                initialView: 'dayGridMonth',
                events: '/transactions/GetCalendarTransactions',
                dateClick: async function(info){
                    await searchTransactionsByDate(info.dateStr);
                }
            });

            calendar.render();
        })

        async function searchTransactionsByDate(date){
            const response = await 
                fetch(`/transactions/GetTransactionsByDate?date=${date}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type' : 'application/json'
                    }
                });

                const json = await response.json();

                let incomes = 0;
                let egress = 0;

                const operationTypeIncomes = 1;

                const formater = new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD'
                });

                const rows = json.map(transaction => {
                    if (transaction.operationTypeId === operationTypeIncomes){
                        incomes += transaction.amount;
                    }
                    else{
                        egress += transaction.amount;
                    }

                    return `<tr>
                        <td>${transaction.categorie}</td>
                        <td>${transaction.account}</td>
                        <td align="right" colspan="2"
                         class=${transaction.operationTypeId === operationTypeIncomes ? 
                             'activo' : 'pasivo'}>
                            ${formater.format(transaction.amount)}
                         </td>
                    </tr>`;
                });

                $("#modalTableBody").html(rows);
                $("#modalTableIncomes").html(formater.format(incomes));
                $("#modalTableEgress").html(formater.format(egress));
                $("#modalTableDate").html(date);

                const transactionsModal = 
                    new bootstrap.Modal(document.getElementById('transactionsModal'));

                transactionsModal.show();
        }
    </script>
}

