trigger:
  branches:
    include:
      - main     # rama principal del repo

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  publishDir: '$(Build.ArtifactStagingDirectory)/publish'

steps:
  # 1️⃣ Instalar SDK de .NET 8
  - task: UseDotNet@2
    displayName: 'Instalar .NET 8 SDK'
    inputs:
      packageType: 'sdk'
      version: '8.0.x'

  # 2️⃣ Restaurar dependencias
  - task: DotNetCoreCLI@2
    displayName: 'Restaurar dependencias'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'

  # 3️⃣ Compilar proyecto
  - task: DotNetCoreCLI@2
    displayName: 'Compilar'
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration)'

  # 4️⃣ (Opcional) Ejecutar tests
  # - task: DotNetCoreCLI@2
  #   displayName: 'Ejecutar tests'
  #   inputs:
  #     command: 'test'
  #     projects: '**/*Tests.csproj'
  #     arguments: '--configuration $(buildConfiguration)'

  # 5️⃣ Publicar artefactos
  - task: DotNetCoreCLI@2
    displayName: 'Publicar app'
    inputs:
      command: 'publish'
      publishWebProjects: true
      arguments: '--configuration $(buildConfiguration) --output $(publishDir)'

  # 6️⃣ Subir artefacto (para que quede guardado en Azure DevOps)
  - task: PublishBuildArtifacts@1
    displayName: 'Publicar artefacto en Azure DevOps'
    inputs:
      PathtoPublish: '$(publishDir)'
      ArtifactName: 'drop'
      publishLocation: 'Container'

  # 7️⃣ Desplegar a Azure App Service
  - task: AzureWebApp@1
    displayName: 'Desplegar a Azure App Service'
    inputs:
      azureSubscription: 'azure-budgetmanagement-conn'   # Nombre del Service Connection
      appType: 'webApp'
      appName: '$(webAppName)'                        # Nombre del App Service
      package: '$(publishDir)'